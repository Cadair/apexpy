version: '{branch}-{build}'
build: off
environment:
  global:
    WITH_COMPILER: 'cmd /E:ON /V:ON /C .\ci\appveyor-with-compiler.cmd'
    TOX_USE_SITEPACKAGES: true
  matrix:
{% for env, config in tox_environments|dictsort %}{% if config.python in ('python2.6', 'python2.7', 'python3.3', 'python3.4', 'python3.5') and not config.cover %}
    - TOXENV: '{{ env }}{% if config.cover %},codecov{% endif %}'
      TOXPYTHON: C:\{{ config.python.replace('.', '') }}-x64\python.exe
      {%- if config.python != 'python3.5' %}

      WINDOWS_SDK_VERSION: v7.{{ '1' if config.python[-3] == '3' else '0' }}
      {%- endif %}

      PYTHON_HOME: C:\{{ config.python.replace('.', '') }}-x64
      PYTHON_VERSION: '{{ config.python[-3:] }}'
      PYTHON_ARCH: '64'
      MINICONDA_HOME: C:\Miniconda-x64
    - TOXENV: '{{ env }}{% if config.cover %},codecov{% endif %}'
      TOXPYTHON: C:\{{ config.python.replace('.', '') }}\python.exe
      {%- if config.python != 'python3.5' %}

      WINDOWS_SDK_VERSION: v7.{{ '1' if config.python[-1] == '3' else '0' }}
      {%- endif %}

      PYTHON_HOME: C:\{{ config.python.replace('.', '') }}
      PYTHON_VERSION: '{{ config.python[-3:] }}'
      PYTHON_ARCH: '32'
      MINICONDA_HOME: C:\Miniconda
{% endif %}{% endfor %}
    - TOXENV: check
      PYTHON_HOME: C:\Python27
      PYTHON_VERSION: '2.7'
      PYTHON_ARCH: '32'
      MINICONDA_HOME: C:\Miniconda
init:
  - ps: echo $env:TOXENV
  - ps: ls C:\Python*
  #- dir /s /b C:\MinGW*
  #- dir /s /b C:\msys*
install:
  - python -u ci\appveyor-bootstrap.py
  - set PATH=%PATH%;C:\msys64\mingw64\bin
  #- set PATH=%PATH%;%MINICONDA_HOME%\Scripts
  #- where conda
  - '%MINICONDA_HOME%\Scripts\conda --version'
  - '%MINICONDA_HOME%\Scripts\conda config --set always_yes yes'
  - '%MINICONDA_HOME%\Scripts\conda update -q conda'
  #- conda create -q -p %PYTHON_HOME% python=%PYTHON_VERSION%
  - '%MINICONDA_HOME%\Scripts\conda install -q -p %PYTHON_HOME% numpy'
  #- activate %PYTHON_HOME%
  # test that building works before long numpy install
  #- '%PYTHON_HOME%\python setup.py clean --all build_ext --force --inplace --compiler=mingw32'
  - '%PYTHON_HOME%\Scripts\virtualenv --version'
  - '%PYTHON_HOME%\Scripts\easy_install --version'
  - '%PYTHON_HOME%\Scripts\pip --version'
  - '%PYTHON_HOME%\Scripts\tox --version'
  #- C:\Miniconda-x64\Scripts\conda config --set always_yes yes
  #- C:\Miniconda-x64\Scripts\conda update -q conda
  #- C:\Miniconda-x64\Scripts\conda install -q pip numpy
  #- C:\Miniconda-x64\python setup.py clean --all build_ext --force --inplace --compiler=mingw32
  - echo [build] >> setup.cfg
  - echo compiler=mingw32 >> setup.cfg
test_script:
  - '%WITH_COMPILER% %PYTHON_HOME%\Scripts\tox'

after_test:
  # if tagged commit, build/upload wheel
  - IF "%TOXENV%"=="2.7-nocover" IF "%PYTHON_ARCH%"=="32" (%WITH_COMPILER% %TOXPYTHON% setup.py sdist)
  - IF "%APPVEYOR_REPO_TAG%"=="true" IF NOT "%TOXENV%"=="%TOXENV:nocover=%" (
      %WITH_COMPILER% %TOXPYTHON% setup.py bdist_wheel &&
      %PYTHON_HOME%\Scripts\pip install twine &&
      %PYTHON_HOME%\Scripts\twine upload -u %PYPI_USER% -p %PYPI_PASS% dist/*
    )
  # not sure if this is needed
  #- deactivate

on_failure:
  #- ps: dir "env:"
  #- ps: get-content .tox\*\log\*
  - dir %PYTHON_HOME%\libs
  - dir .tox\%TOXENV%\libs
artifacts:
  - path: dist\*
matrix:
  allow_failures:
    - TOXENV: 'check'
### To enable remote debugging uncomment this:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

