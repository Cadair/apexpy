version: '{branch}-{build}'
build: off
configuration: Release
environment:
  global:
    WITH_COMPILER: 'cmd /E:ON /V:ON /C .\ci\appveyor-with-compiler.cmd'
  matrix:
    - TESTENV: 'check'
      PYTHON_VERSION: '2.7'
      MINICONDA_HOME: 'C:\Miniconda'
      INSTALL_EXTRA_DEPS: 'pip install docutils check-manifest flake8 readme pygments'
      TESTSCRIPT: 'python setup.py check --strict --metadata --restructuredtext && check-manifest && flake8 src tests'
{% for env, config in tox_environments|dictsort %}{% if config.python in ('python2.6', 'python2.7', 'python3.3', 'python3.4', 'python3.5') and not config.cover %}

    - TESTENV: '{{ env }}-64'
      {%- if config.python != 'python3.5' %}

      WINDOWS_SDK_VERSION: v7.{{ '1' if config.python[-3] == '3' else '0' }}
      {%- endif %}

      PYTHON_VERSION: '{{ config.python[-3:] }}'
      MINICONDA_HOME: C:\Miniconda-x64
      TESTSCRIPT: 'py.test'

    - TESTENV: '{{ env }}-32'
      {%- if config.python != 'python3.5' %}

      WINDOWS_SDK_VERSION: v7.{{ '1' if config.python[-1] == '3' else '0' }}
      {%- endif %}

      PYTHON_VERSION: '{{ config.python[-3:] }}'
      MINICONDA_HOME: C:\Miniconda
      TESTSCRIPT: 'py.test'

{% endif %}{% endfor %}
init:
  - ps: echo $env:TESTENV
install:
  - set PATH=%PATH%;C:\msys64\mingw64\bin
  # remove file which conflicts with installation of package 'readme' on case-insensitive file systems
  - '%MINICONDA_HOME%\Scripts\conda config --set always_yes yes'
  - '%MINICONDA_HOME%\Scripts\conda update -q conda'
  - '%MINICONDA_HOME%\Scripts\conda create -q -p C:\pythontest python=%PYTHON_VERSION% libpython pytest numpy'
  - del C:\pythontest\Lib\site-packages\README
  # to stop the unnecessary "Only MS compiler supported with gfortran on win64" error on some configurations (numpy 1.9?)
  - python ci\fix-compiler-error.py
  - '%MINICONDA_HOME%\Scripts\activate C:\pythontest'
  - where python
  - where pip
  - '%INSTALL_EXTRA_DEPS%'
  - python setup.py clean --all build_ext --force --inplace --compiler=mingw32
  - python setup.py develop
test_script:
  - '%TESTSCRIPT%'

after_test:
  # if tagged commit, build/upload wheel
#  - IF "%TOXENV%"=="2.7-nocover" IF "%PYTHON_ARCH%"=="32" (%WITH_COMPILER% %TOXPYTHON% setup.py sdist)
#  - IF "%APPVEYOR_REPO_TAG%"=="true" IF NOT "%TOXENV%"=="%TOXENV:nocover=%" (
#      %WITH_COMPILER% %TOXPYTHON% setup.py bdist_wheel &&
#      %PYTHON_HOME%\Scripts\pip install twine &&
#      %PYTHON_HOME%\Scripts\twine upload -u %PYPI_USER% -p %PYPI_PASS% dist/*
#    )

deploy_script:
  - pip install twine
  - python setup.py sdist bdist_wheel
  - IF "%APPVEYOR_REPO_TAG%"=="true" (
      python setup.py register &&
      twine upload -u %PYPI_USER% -p %PYPI_PASS% dist/*
    )

artifacts:
  - path: dist\*
matrix:
  allow_failures:
    - TOXENV: 'check'
### To enable remote debugging uncomment this:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

